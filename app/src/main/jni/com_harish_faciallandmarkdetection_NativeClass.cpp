/* DO NOT EDIT THIS FILE - it is machine generated */
#include <com_harish_faciallandmarkdetection_NativeClass.h>

/*
 * Class:     com_harish_faciallandmarkdetection_NativeClass
 * Method:    getMessage
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_harish_faciallandmarkdetection_NativeClass_getMessage
  (JNIEnv *env, jclass){
    env->NewStringUTF("JNI message");
  }

/*
 * Class:     com_harish_faciallandmarkdetection_NativeClass
 * Method:    landmarkDetection
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_harish_faciallandmarkdetection_NativeClass_landmarkDetection
  (JNIEnv *env, jclass abc , jlong addrInput, jlong addrOutput){
    Mat& image = *(Mat*)addrInput;
    Mat& dst = *(Mat*)addrOutput;

    faceDetection(image, dst);
  }

void faceDetection(Mat& img, Mat& dst){
    try{
        frontal_face_detector detector = get_frontal_face_detection();
        shape_predictor pose_model;
        deserialize("/storage/emulated/0/shape_predictor_68_face_landmarks.dat") >> pose_model;

        cv_image<bgr_pixel> cimg(img);

        //Detect faces using dlib
        std::vector<dlib::rectangle> faces = detector(cimg);
        //Find the pose of each face
        std::vector<full_object_detection> shapes;

        for (unsigned long i = 0; i < faces.size(); ++i){
            shapes.push_back(pose_model(cimg, faces[i]));
        }

        //render to mat
        dst = img.clone();
        renderToMat(shapes, dst);
    } catch (serialization_error& e) {
        cout << endl << e.what() << endl;
    }
}
