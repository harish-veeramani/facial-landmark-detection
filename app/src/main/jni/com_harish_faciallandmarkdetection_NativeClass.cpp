/* DO NOT EDIT THIS FILE - it is machine generated */
#include <com_harish_faciallandmarkdetection_NativeClass.h>

/*
 * Class:     com_harish_faciallandmarkdetection_NativeClass
 * Method:    getMessage
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_harish_faciallandmarkdetection_NativeClass_getMessage
  (JNIEnv *env, jclass){
    env->NewStringUTF("JNI message");
  }

/*
 * Class:     com_harish_faciallandmarkdetection_NativeClass
 * Method:    landmarkDetection
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_harish_faciallandmarkdetection_NativeClass_landmarkDetection
  (JNIEnv *env, jclass abc , jlong addrInput, jlong addrOutput){
    Mat& image = *(Mat*)addrInput;
    Mat& dst = *(Mat*)addrOutput;

    faceDetection(image, dst);
  }

void faceDetection(Mat& img, Mat& dst){
    try{
        frontal_face_detector detector = get_frontal_face_detection();
        shape_predictor pose_model;
        deserialize("/storage/emulated/0/shape_predictor_68_face_landmarks.dat") >> pose_model;

        cv_image<bgr_pixel> cimg(img);

        //Detect faces using dlib
        std::vector<dlib::rectangle> faces = detector(cimg);
        //Find the pose of each face
        std::vector<full_object_detection> shapes;

        for (unsigned long i = 0; i < faces.size(); ++i){
            shapes.push_back(pose_model(cimg, faces[i]));
        }

        //render to mat
        dst = img.clone();
        renderToMat(shapes, dst);
    } catch (serialization_error& e) {
        cout << endl << e.what() << endl;
    }
}

void renderToMat(std::vector<full_object_detection>& dets, Mat& dst){
    Scalar color = Scalar(0, 255, 0);
    int sz = 3;

    for (unsigned long idx = 0; idx < dets.size(); idx++){
        for (unsigned long i = 1; i <= 16; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }

        //Top of nose
        for (unsigned long i = 28; i <= 30; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }

        //Left eyebrow
        for (unsigned long i = 18; i <= 21; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }

        //Right eyebrow
        for (unsigned long i = 23; i <= 26; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }

        //Bottom part of nose
        for (unsigned long i = 31; i <= 35; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }
        cv::line(dst, Point(dets[idx].part(30).x(), dets[idx].part(30).y()), Point(dets[idx].part(35).x(), dets[idx].part(35).y()), color, sz);

        //Left eye
        for (unsigned long i = 37; i <= 41; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }
        cv::line(dst, Point(dets[idx].part(36).x(), dets[idx].part(36).y()), Point(dets[idx].part(41).x(), dets[idx].part(41).y()), color, sz);

        //Right eye
        for (unsigned long i = 43; i <= 47; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }
        cv::line(dst, Point(dets[idx].part(42).x(), dets[idx].part(42).y()), Point(dets[idx].part(47).x(), dets[idx].part(47).y()), color, sz);

        //Outer lips
        for (unsigned long i = 49; i <= 59; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }
        cv::line(dst, Point(dets[idx].part(48).x(), dets[idx].part(48).y()), Point(dets[idx].part(59).x(), dets[idx].part(59).y()), color, sz);

        //Inner lips
        for (unsigned long i = 61; i <= 67; ++i){
            cv::line(dst, Point(dets[idx].part(i).x(), dets[idx].part(i).y()), Point(dets[idx].part(i - 1).x(), dets[idx].part(i - 1).y()), color, sz);
        }
        cv::line(dst, Point(dets[idx].part(60).x(), dets[idx].part(60).y()), Point(dets[idx].part(67).x(), dets[idx].part(67).y()), color, sz);
    }
}
